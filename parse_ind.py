"""
parser for `OnDemand Generic Index File Format` generated by Doxim Inc.
"""


from copy import deepcopy
from json import dump
import os
from typing import LiteralString


def get_index_filename(extension) -> str:
    current_directory = os.getcwd()
    files = [file for file in os.listdir(current_directory) if file.endswith(extension)]
    return files[0]

COMMENT: LiteralString = 'COMMENT:'
KEY: LiteralString = 'GROUP_FIELD_NAME:'
NAME: LiteralString = 'GROUP_FILENAME:'
OTHER: list[LiteralString] = ['CODE_PAGE:']
VAL: LiteralString = 'GROUP_FIELD_VALUE:'

LENGTHS:dict[str:int] = {
    'comment': len(COMMENT),
    'key': len(KEY),
    'name': len(NAME),
    'val': len(VAL),
}

def is_comment(line: str) -> bool:
    return line[:LENGTHS['comment']] == COMMENT
def is_other(line:str) -> bool:
    for o in OTHER:
        if line.find(o) != -1:
            return True
    return False
def is_key(line: str) -> bool:
    return line[:LENGTHS['key']] == KEY
def is_name(line: str) -> bool:
    return line[:LENGTHS['name']] == NAME
def is_val(line: str) -> bool:
    return line[:LENGTHS['val']] == VAL

def write_json_to_file(data, file_path):
    with open(file_path, 'w') as file:
        dump(data, file, indent=4)

if __name__ == "__main__":
    index_file:str = get_index_filename('.ind')
    with open(index_file, 'r') as file:
        all_key_value = {}
        key_value = {}
        _key: None|str = None
        _value: None|str = None
        _name: None|str = None
        
        for line in file:
            if is_comment(line) or is_other(line):
                continue
            elif is_key(line):
                _key = line.replace(KEY, "").strip()
            elif is_val(line):
                _value = line.replace(VAL, "").strip()
            elif is_name(line):
                name = line.replace(NAME, "").strip()
                all_key_value.update({deepcopy(name): key_value})
                key_value = {}
                
            if _key is not None and _value is not None:
                key_value.update({deepcopy(_key):deepcopy(_value)})
                _key = None
                _value = None
    write_json_to_file(all_key_value, f"{index_file}.json")

